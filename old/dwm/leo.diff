diff --git a/config.def.h b/config.def.h
index 1c0b587..9baa535 100644
--- a/config.def.h
+++ b/config.def.h
@@ -16,6 +16,7 @@ static const char *colors[][3]      = {
 	/*               fg         bg         border   */
 	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
 	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+	[SchemeUrg]  = { col_gray1, col_gray3, col_cyan  },
 };
 
 /* tagging */
diff --git a/config.h b/config.h
new file mode 100644
index 0000000..874e460
--- /dev/null
+++ b/config.h
@@ -0,0 +1,128 @@
+/* See LICENSE file for copyright and license details. */
+
+#include <X11/XF86keysym.h>	// For media keys
+
+static const char shellPath[] = "/bin/zsh";
+
+/* appearance */
+static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int snap      = 32;       /* snap pixel */
+static const int showbar            = 1;        /* 0 means no bar */
+static const int topbar             = 1;        /* 0 means bottom bar */
+
+static const char *fonts[] = {
+	"inconsolata:size=10:dpi=192",
+	"adobe-source-han-sans-jp:size=10:dpi=192"
+};
+static const char dmenufont[] = "inconsolata:size=10:dpi=192";
+
+// Set up pywal colors.
+#include "/home/leonid/.cache/wal/colors-wal-dwm.h"
+
+/* tagging */
+static const char *tags[] = { "一", "二", "三", "四", "五", "六", "七", "八", "九" };
+
+static const Rule rules[] = {
+	/* xprop(1):
+	 *	WM_CLASS(STRING) = instance, class
+	 *	WM_NAME(STRING) = title
+	 */
+	/* class      instance    title       tags mask     isfloating   monitor */
+	{ "vlc",	  NULL,		  NULL,		  1 << 8,		0,			 -1 },
+};
+
+/* layout(s) */
+static const float mfact     = 0.5; /* factor of master area size [0.05..0.95] */
+static const int nmaster     = 1;     /* number of clients in master area */
+static const int resizehints = 1;     /* 1 means respect size hints in tiled resizals */
+
+static const Layout layouts[] = {
+	/* symbol     arrange function */
+	{ "[]=",      tile },    /* first entry is default */
+	{ "><>",      NULL },    /* no layout function means floating behavior */
+	{ "[ ]",      monocle },
+};
+
+/* key definitions */
+#define SUPER Mod1Mask
+#define TAGKEYS(KEY,TAG) \
+	{ SUPER,                       KEY,      view,           {.ui = 1 << TAG} }, \
+	{ SUPER|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+	{ SUPER|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+	{ SUPER|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+
+/* helper for spawning shell commands in the pre dwm-5.0 fashion */
+#define SHCMD(cmd) { .v = (const char*[]){ shellPath, "-c", cmd, NULL } }
+
+/* commands */
+static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", norm_bg, "-nf", norm_fg, "-sb", sel_bg, "-sf", sel_fg, NULL };
+static const char *termcmd[]  = { "termite", NULL };
+
+/* Audio, backlighting */
+static const char *vold[] = { "amixer", "-q", "sset", "Master", "2%-", NULL };
+static const char *volu[] = { "amixer", "-q", "sset", "Master", "2%+", NULL };
+static const char *mute[] = { "amixer", "-q", "sset", "Master", "toggle", NULL };
+
+static const char *blu[] = { "xbacklight", "-inc", "2.5", NULL };
+static const char *bld[] = { "xbacklight", "-dec", "2.5", NULL };
+
+// Def keys
+static Key keys[] = {
+	/* modifier                     key        function        argument */
+	{ SUPER,                       XK_d,      spawn,          {.v = dmenucmd } },
+	{ SUPER,                       XK_Return, spawn,          {.v = termcmd } },
+	{ SUPER,                       XK_b,      togglebar,      {0} },
+	{ SUPER,                       XK_j,      focusstack,     {.i = +1 } },
+	{ SUPER,                       XK_k,      focusstack,     {.i = -1 } },
+	{ SUPER|ShiftMask,             XK_i,      incnmaster,     {.i = +1 } },
+	{ SUPER|ShiftMask,             XK_d,      incnmaster,     {.i = -1 } },
+	{ SUPER,                       XK_h,      setmfact,       {.f = -0.05} },
+	{ SUPER,                       XK_l,      setmfact,       {.f = +0.05} },
+	{ SUPER|ShiftMask,             XK_Return, zoom,           {0} },
+	{ SUPER,                       XK_Tab,    view,           {0} },
+	{ SUPER|ShiftMask,             XK_c,      killclient,     {0} },
+	{ SUPER,                       XK_t,      setlayout,      {.v = &layouts[0]} },
+	{ SUPER,                       XK_f,      setlayout,      {.v = &layouts[1]} },
+	{ SUPER,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ SUPER,                       XK_space,  setlayout,      {0} },
+	{ SUPER|ShiftMask,             XK_space,  togglefloating, {0} },
+	{ SUPER,                       XK_0,      view,           {.ui = ~0 } },
+	{0,			  XF86XK_AudioLowerVolume,    spawn,          {.v = vold } },
+    {0,			  XF86XK_AudioRaiseVolume,    spawn,          {.v = volu } },
+    {0,			  XF86XK_AudioMute,           spawn,          {.v = mute } },
+    {0,			  XF86XK_MonBrightnessUp,     spawn,          {.v = blu } },
+	{0,			  XF86XK_MonBrightnessDown,   spawn, 		  {.v = bld } },
+	{ SUPER|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
+	{ SUPER,                       XK_comma,  focusmon,       {.i = -1 } },
+	{ SUPER,                       XK_period, focusmon,       {.i = +1 } },
+	{ SUPER|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
+	{ SUPER|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	TAGKEYS(                       XK_1,                      0)
+	TAGKEYS(                       XK_2,                      1)
+	TAGKEYS(                       XK_3,                      2)
+	TAGKEYS(                       XK_4,                      3)
+	TAGKEYS(                       XK_5,                      4)
+	TAGKEYS(                       XK_6,                      5)
+	TAGKEYS(                       XK_7,                      6)
+	TAGKEYS(                       XK_8,                      7)
+	TAGKEYS(                       XK_9,                      8)
+	{ SUPER|ShiftMask,             XK_q,      quit,           {0} },
+};
+
+/* button definitions */
+/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
+static Button buttons[] = {
+	/* click                event mask      button          function        argument */
+	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
+	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
+	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkClientWin,         SUPER,          Button1,        movemouse,      {0} },
+	{ ClkClientWin,         SUPER,          Button2,        togglefloating, {0} },
+	{ ClkClientWin,         SUPER,          Button3,        resizemouse,    {0} },
+	{ ClkTagBar,            0,              Button1,        view,           {0} },
+	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
+	{ ClkTagBar,            SUPER,          Button1,        tag,            {0} },
+	{ ClkTagBar,            SUPER,          Button3,        toggletag,      {0} },
+};
diff --git a/dwm.c b/dwm.c
index 4465af1..f097a69 100644
--- a/dwm.c
+++ b/dwm.c
@@ -59,7 +59,7 @@
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeUrg }; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
